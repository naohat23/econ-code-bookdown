[["index.html", "エコノミストのためのRコード はじめに", " エコノミストのためのRコード 服部直樹 2022-05-05 はじめに 経済・金融分析で使用するRのコード集です。 "],["rの設定.html", "1 Rの設定 1.1 設定全般 1.2 パッケージのインストールとインポート 1.3 グラフの設定", " 1 Rの設定 Rを使用する際の各種設定です。パッケージのインストール・インポートや、プロキシサーバーの設定（プロキシ環境のみ）など、Rの使用に欠かせない様々な設定について記載しています。 1.1 設定全般 Rのバージョン確認 Rのバージョン情報を出力します。 version ## _ ## platform x86_64-w64-mingw32 ## arch x86_64 ## os mingw32 ## system x86_64, mingw32 ## status ## major 4 ## minor 1.3 ## year 2022 ## month 03 ## day 10 ## svn rev 81868 ## language R ## version.string R version 4.1.3 (2022-03-10) ## nickname One Push-Up セッション情報の確認 Rのバージョンに加え、使用環境、パッケージ情報を出力します。 sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19044) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=Japanese_Japan.932 LC_CTYPE=Japanese_Japan.932 ## [3] LC_MONETARY=Japanese_Japan.932 LC_NUMERIC=C ## [5] LC_TIME=Japanese_Japan.932 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] bookdown_0.26 digest_0.6.29 R6_2.5.1 jsonlite_1.8.0 ## [5] magrittr_2.0.3 evaluate_0.15 stringi_1.7.6 rlang_1.0.2 ## [9] cli_3.2.0 rstudioapi_0.13 jquerylib_0.1.4 bslib_0.3.1 ## [13] rmarkdown_2.13 tools_4.1.3 stringr_1.4.0 xfun_0.30 ## [17] yaml_2.3.5 fastmap_1.1.0 compiler_4.1.3 htmltools_0.5.2 ## [21] knitr_1.38 sass_0.4.1 警告の非表示 Rが出力する警告（Warning）を非表示にします。 options(warn = -1) 関数が出力する警告やメッセージの非表示 関数が出力する警告やメッセージはoptions(warn = -1)で非表示にできないため、suppressWarnings()関数やsuppressMessages()関数を使用します。 suppressWarnings(警告を出力する関数) suppressMessages(メッセージを出力する関数) 1.2 パッケージのインストールとインポート 使用するパッケージ一覧 tidyverse系 lubridate：日付処理 magrittr：パイプ処理 tidyverse：モダンなデータ分析用パッケージセット readxl：Excelファイルの読み込み 図表系 esquisse：shanyを使用したインタラクティブな図表作成 geofacet：地図形式のファセット図配置 ggpubr：論文形式の図表作成 ggsci：科学系論文の雑誌別カラーパレット ggrepel：散布図のラベル付与 lemon：ファセット図の軸・目盛り表示 RColorBrewer：カラーパレット 統計系 mgcv：一般化加法モデル（GAM） plm：パネルデータモデル sigmoid：シグモイド関数 tidyquant：金融時系列データ分析 その他 openxlsx：Excelのxlsxファイルの読み込み・編集・書き出し パッケージのインストールとインポート パッケージのインストールはinstall.packages()関数、インストールしたパッケージのインポート（呼び出し）はlibrary()関数で実行します。一度インストールすれば、その後はインポートするだけでパッケージを使用することができます。 # パッケージ一覧 packages &lt;- c( &quot;lubridate&quot;, &quot;magrittr&quot;, &quot;tidyverse&quot;, &quot;readxl&quot;, &quot;esquisse&quot;, &quot;geofacet&quot;, &quot;ggpubr&quot;, &quot;ggsci&quot;, &quot;ggrepel&quot;, &quot;lemon&quot;, &quot;RColorBrewer&quot;, &quot;mgcv&quot;, &quot;plm&quot;, &quot;sigmoid&quot;, &quot;tidyquant&quot;, &quot;openxlsx&quot; ) # インストールしていないパッケージがあればインストール new_packages &lt;- packages[!(packages %in% installed.packages()[,&quot;Package&quot;])] if(length(new_packages)) { install.packages(new_packages) } # パッケージをインポート for (pkg in packages) { library(pkg, character.only = TRUE) } ## ## 次のパッケージを付け加えます: &#39;lubridate&#39; ## 以下のオブジェクトは &#39;package:base&#39; からマスクされています: ## ## date, intersect, setdiff, union ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.6 v dplyr 1.0.8 ## v tidyr 1.2.0 v stringr 1.4.0 ## v readr 2.1.2 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x lubridate::as.difftime() masks base::as.difftime() ## x lubridate::date() masks base::date() ## x tidyr::extract() masks magrittr::extract() ## x dplyr::filter() masks stats::filter() ## x lubridate::intersect() masks base::intersect() ## x dplyr::lag() masks stats::lag() ## x purrr::set_names() masks magrittr::set_names() ## x lubridate::setdiff() masks base::setdiff() ## x lubridate::union() masks base::union() ## ## 次のパッケージを付け加えます: &#39;lemon&#39; ## 以下のオブジェクトは &#39;package:purrr&#39; からマスクされています: ## ## %||% ## 以下のオブジェクトは &#39;package:ggplot2&#39; からマスクされています: ## ## CoordCartesian, element_render ## 要求されたパッケージ nlme をロード中です ## ## 次のパッケージを付け加えます: &#39;nlme&#39; ## 以下のオブジェクトは &#39;package:dplyr&#39; からマスクされています: ## ## collapse ## This is mgcv 1.8-40. For overview type &#39;help(&quot;mgcv-package&quot;)&#39;. ## ## 次のパッケージを付け加えます: &#39;plm&#39; ## 以下のオブジェクトは &#39;package:dplyr&#39; からマスクされています: ## ## between, lag, lead ## 要求されたパッケージ PerformanceAnalytics をロード中です ## 要求されたパッケージ xts をロード中です ## 要求されたパッケージ zoo をロード中です ## ## 次のパッケージを付け加えます: &#39;zoo&#39; ## 以下のオブジェクトは &#39;package:base&#39; からマスクされています: ## ## as.Date, as.Date.numeric ## ## 次のパッケージを付け加えます: &#39;xts&#39; ## 以下のオブジェクトは &#39;package:dplyr&#39; からマスクされています: ## ## first, last ## ## 次のパッケージを付け加えます: &#39;PerformanceAnalytics&#39; ## 以下のオブジェクトは &#39;package:graphics&#39; からマスクされています: ## ## legend ## 要求されたパッケージ quantmod をロード中です ## 要求されたパッケージ TTR をロード中です ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo ## == Need to Learn tidyquant? ==================================================== ## Business Science offers a 1-hour course - Learning Lab #9: Performance Analysis &amp; Portfolio Optimization with tidyquant! ## &lt;/&gt; Learn more at: https://university.business-science.io/p/learning-labs-pro &lt;/&gt; # 変数を削除 rm( new_packages, packages, pkg ) Rのパッケージは開発者が随時アップデートしていますが、自動で反映されることはありません。パッケージをアップデートする場合は、次のコードを実行してください。 # パッケージをすべてアップデート update.packages() # アップデートの対象になる古いバージョンのパッケージ一覧を出力 old.packages() # パッケージを指定してアップデート install.packages(&quot;tidyverse&quot;) 1.3 グラフの設定 レポートやスライドに掲載するためのグラフは、主にRのggplot2パッケージで作成します。 グラフのテーマ設定 実務上、Excelと併用することを想定しているため、Excelで出力されるグラフに似たテーマを設定します。ggplot2にデフォルトで用意されている様々なテーマについては、こちらを参照してください。 theme_set(theme_light()) グラフのフォント設定 Windows上でRを使用する場合は、日本語フォントをグラフ上で表示するために以下の設定が必要です。ここでは代表的なフォントとしてMeiryo UIとYu Gothic UIを設定します。それぞれのフォントにMEIRYO、YUGOというキーを割り当て、ggplot2でグラフを作成する際にキーを指定します。 windowsFonts(&quot;MEIRYO&quot; = windowsFont(&quot;Meiryo UI&quot;)) windowsFonts(&quot;YUGO&quot; = windowsFont(&quot;Yu Gothic UI&quot;)) "],["rの基本的な使用方法.html", "2 Rの基本的な使用方法 2.1 基本操作 2.2 ベクトル 2.3 リスト 2.4 演算子と関数 2.5 制御構文 2.6 データの読み込み・書き出し 2.7 オブジェクトのセーブ・ロード", " 2 Rの基本的な使用方法 2.1 基本操作 2.2 ベクトル 2.3 リスト 2.4 演算子と関数 2.5 制御構文 2.6 データの読み込み・書き出し CSVデータ data &lt;- readr::read_csv(file = &quot;directory/file.csv&quot;, # ファイルパス／URL（拡張子が必要） col_names = TRUE, # ヘッダー（列名データ）の有無 col_types = NULL, # 各列の型の指定（c：文字列型、d：数値型、D：日付型、l：論理値型） skip = 0) # 読み込み時に上からスキップする行数 Excelデータ（xls形式） readrパッケージのread_excel()関数はExcelのxls形式、xlsx形式どちらも読み込み可能です。ただし、読み込みができるのはローカルネットワーク内のファイルパスだけで、URLからの読み込みはできません。 data &lt;- readxl::read_excel(path = &quot;directory/file.xls&quot;, # ファイルパス（拡張子が必要、URLは不可） sheet = NULL, # シートインデックス／シート名 col_names = TRUE, # ヘッダー（列名データ）の有無 col_types = NULL, # 各列の型の指定（c：文字列型、d：数値型、D：日付型、l：論理値型） skip = 0) # 読み込み時に上からスキップする行数 Excelデータ（xlsx形式） openxlsxパッケージのread.xlsx()関数であれば、ローカルネットワーク内のファイルパスとURLどちらからでも読み込みが可能です。ただし、読み込めるファイル形式はxlsx形式のみで、xls形式には対応していません。 data &lt;- openxlsx::read.xlsx(xlsxFile = &quot;directory/file.xlsx&quot;, # ファイルパス／URL（拡張子が必要） sheet = 1, # シートインデックス／シート名 startRow = 5, # 読み込み開始行 colNames = TRUE, # 列名データの有無 rowNames = FALSE, # 行名データの有無 rows = 5:53, # 読み込む列（NULLですべて読み込み） cols = NULL) # 読み込む行（NULLですべて読み込み） CSVデータの書き出し write.csv(..., # 書き出すオブジェクト名（クオーテーションは不要） file = &quot;directory/file.csv&quot;, # 書き出し先のファイルパス（拡張子が必要） row.names = FALSE) # 行番号を付与するか 2.7 オブジェクトのセーブ・ロード セーブ RのオブジェクトをRData形式で保存します。 save(..., # セーブするオブジェクト名（クオーテーションは不要） file = &quot;directory/file.RData&quot;) # セーブ先のファイルパス（拡張子が必要） ロード 保存したRData形式のオブジェクトを呼び出します。 load(file = &quot;directory/file.RData&quot;) # ロード元ファイルパス（拡張子が必要） "],["tidyverseによるデータベース操作.html", "3 tidyverseによるデータベース操作 3.1 パッケージのインポート 3.2 tidyverseの基礎 3.3 サンプルデータの読み込み 3.4 列の選択 3.5 列名の変更 3.6 行のフィルタ 3.7 行の並べ替え 3.8 列の追加・修正 3.9 グループ化 3.10 集計 3.11 縦型・横型の変換 3.12 データの結合 3.13 重複処理 3.14 欠損値処理 3.15 補完処理 3.16 時系列データの頻度変換", " 3 tidyverseによるデータベース操作 tidyverseは、Rでデータベースを効率的に操作・可視化するために開発された様々なパッケージをひとまとめにしたものです。本節では、データベース操作に関わるdplyrパッケージとtidyrパッケージを主に使用します。 dplyr：データベースに様々な操作を加えるパッケージ tidyr：データベースをtidy dataに変形するためのパッケージ tidy dataとは、tidyverseの開発者であるHadley Wickham氏が提唱した概念で、機械処理しやすいデータ形式のことを言います。その要件は次の通りです。 1つの列が1つの変数を表す 1つの行が1つのレコードを表す 1つのテーブルが1つのデータセットだけを含む 例えば、国別・産業別GDPの時系列データであれば、国の列、産業の列、時点の列、データ（GDP）の列、の4列で構成されるデータがtidy dataです。こうしたデータを縦型データとも呼びます。これに対し、国や産業が横方向に並んでいる場合（日本・製造業のGDPの列、日本・飲食業のGDPの列、米国・金融業のGDPの列など）は、tidy dataではありません（こちらは横型データと呼びます）。tidy dataは属性条件によるフィルタがかけやすいなど、データ処理が列方向に一括して行えるため、機械処理に適しています。 tidy dataの詳細については、松村優哉・湯谷啓明・紀ノ定保礼・前田和寛（2021）『改訂2版 Rユーザのための RStudio［実践］入門』を参照してください。 (https://gihyo.jp/book/2021/978-4-297-12170-9) 3.1 パッケージのインポート library(magrittr) library(tidyverse) library(tidyquant) 3.2 tidyverseの基礎 dplyrやtidyrは、もとのデータベースに対して変更を一切加えません。データベースを操作した結果を残しておくためには、オブジェクトに代入する必要があります。代入先をもとのデータベースのオブジェクトにすると、データベースの内容が書き換えられます。 tidyverseではパイプ%&gt;%が多用されます。パイプは、データベースのある処理の結果を次の処理へと受け渡すものです。パイプを連続して使用することで、処理の途中の結果をいちいちオブジェクトに代入することなく、一括して複数の処理を行うことができます。 # mpgデータベースからmanufacturer変数とcty変数を選択し、manufacturer変数でフィルタしたうえで、cty変数を10倍し、結果をresultオブジェクトに保存する例 result &lt;- mpg %&gt;% dplyr::select(manufacturer, cty) %&gt;% dplyr::filter(manufacturer == &quot;toyota&quot;) %&gt;% dplyr::mutate(cty_10 = cty * 10) print(result) ## # A tibble: 34 x 3 ## manufacturer cty cty_10 ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 toyota 15 150 ## 2 toyota 16 160 ## 3 toyota 15 150 ## 4 toyota 15 150 ## 5 toyota 16 160 ## 6 toyota 14 140 ## 7 toyota 21 210 ## 8 toyota 21 210 ## 9 toyota 21 210 ## 10 toyota 21 210 ## # ... with 24 more rows 3.3 サンプルデータの読み込み 本節で使用するサンプルデータをWebから直接読み込みます。プロキシ環境では、プロキシサーバーの設定が必要です。 ここでは、Our World in Dataの新型コロナウイルス関連データセットを使用します。データの詳細はこちらを参照してください。 Hannah Ritchie, Edouard Mathieu, Lucas Rodés-Guirao, Cameron Appel, Charlie Giattino, Esteban Ortiz-Ospina, Joe Hasell, Bobbie Macdonald, Diana Beltekian and Max Roser (2020) - “Coronavirus Pandemic (COVID-19)”. Published online at OurWorldInData.org. Retrieved from: ‘https://ourworldindata.org/coronavirus’ [Online Resource] # Our World in Dataの新型コロナデータをtibble型で読み込み data_owid &lt;- readr::read_csv(file = &quot;https://covid.ourworldindata.org/data/owid-covid-data.csv&quot;, # ファイルパス／URL col_names = TRUE, # ヘッダー（列名データ）の有無 col_types = NULL, # 各列の型の指定（c：文字列型、d：数値型、D：日付型、l：論理値型） skip = 0) # 読み込み時に上からスキップする行数 ## Rows: 183583 Columns: 67 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (4): iso_code, continent, location, tests_units ## dbl (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea... ## date (1): date ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. # データをコンソールに出力 print(data_owid) ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... # データをR Studioの新規タブで閲覧 View(data_owid) 3.4 列の選択 データベースから列（変数）を選択するには、dplyr::select()関数を使用します。 列名で選択 data_owid %&gt;% dplyr::select(location, date, new_cases) ## # A tibble: 183,583 x 3 ## location date new_cases ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 Afghanistan 2020-02-24 5 ## 2 Afghanistan 2020-02-25 0 ## 3 Afghanistan 2020-02-26 0 ## 4 Afghanistan 2020-02-27 0 ## 5 Afghanistan 2020-02-28 0 ## 6 Afghanistan 2020-02-29 0 ## 7 Afghanistan 2020-03-01 0 ## 8 Afghanistan 2020-03-02 0 ## 9 Afghanistan 2020-03-03 0 ## 10 Afghanistan 2020-03-04 0 ## # ... with 183,573 more rows 列名を格納したベクトルで選択 cols &lt;- c(&quot;location&quot;, &quot;date&quot;, &quot;new_cases&quot;) data_owid %&gt;% dplyr::select(cols) ## Note: Using an external vector in selections is ambiguous. ## i Use `all_of(cols)` instead of `cols` to silence this message. ## i See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. ## This message is displayed once per session. ## # A tibble: 183,583 x 3 ## location date new_cases ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 Afghanistan 2020-02-24 5 ## 2 Afghanistan 2020-02-25 0 ## 3 Afghanistan 2020-02-26 0 ## 4 Afghanistan 2020-02-27 0 ## 5 Afghanistan 2020-02-28 0 ## 6 Afghanistan 2020-02-29 0 ## 7 Afghanistan 2020-03-01 0 ## 8 Afghanistan 2020-03-02 0 ## 9 Afghanistan 2020-03-03 0 ## 10 Afghanistan 2020-03-04 0 ## # ... with 183,573 more rows 列を非選択（削除） data_owid %&gt;% dplyr::select(-location) ## # A tibble: 183,583 x 66 ## iso_code continent date total_cases new_cases new_cases_smoothed ## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia 2020-02-24 5 5 NA ## 2 AFG Asia 2020-02-25 5 0 NA ## 3 AFG Asia 2020-02-26 5 0 NA ## 4 AFG Asia 2020-02-27 5 0 NA ## 5 AFG Asia 2020-02-28 5 0 NA ## 6 AFG Asia 2020-02-29 5 0 0.714 ## 7 AFG Asia 2020-03-01 5 0 0.714 ## 8 AFG Asia 2020-03-02 5 0 0 ## 9 AFG Asia 2020-03-03 5 0 0 ## 10 AFG Asia 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 列名に特定の文字列を含む列を選択 data_owid %&gt;% dplyr::select(location, date, contains(&quot;cases&quot;)) ## # A tibble: 183,583 x 8 ## location date total_cases new_cases new_cases_smoot~ total_cases_per~ ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanist~ 2020-02-24 5 5 NA 0.126 ## 2 Afghanist~ 2020-02-25 5 0 NA 0.126 ## 3 Afghanist~ 2020-02-26 5 0 NA 0.126 ## 4 Afghanist~ 2020-02-27 5 0 NA 0.126 ## 5 Afghanist~ 2020-02-28 5 0 NA 0.126 ## 6 Afghanist~ 2020-02-29 5 0 0.714 0.126 ## 7 Afghanist~ 2020-03-01 5 0 0.714 0.126 ## 8 Afghanist~ 2020-03-02 5 0 0 0.126 ## 9 Afghanist~ 2020-03-03 5 0 0 0.126 ## 10 Afghanist~ 2020-03-04 5 0 0 0.126 ## # ... with 183,573 more rows, and 2 more variables: ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt; 列名が特定の文字列から始まる列を選択 data_owid %&gt;% dplyr::select(location, date, starts_with(&quot;new_cases&quot;)) ## # A tibble: 183,583 x 6 ## location date new_cases new_cases_smoothed new_cases_per_million ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 2020-02-24 5 NA 0.126 ## 2 Afghanistan 2020-02-25 0 NA 0 ## 3 Afghanistan 2020-02-26 0 NA 0 ## 4 Afghanistan 2020-02-27 0 NA 0 ## 5 Afghanistan 2020-02-28 0 NA 0 ## 6 Afghanistan 2020-02-29 0 0.714 0 ## 7 Afghanistan 2020-03-01 0 0.714 0 ## 8 Afghanistan 2020-03-02 0 0 0 ## 9 Afghanistan 2020-03-03 0 0 0 ## 10 Afghanistan 2020-03-04 0 0 0 ## # ... with 183,573 more rows, and 1 more variable: ## # new_cases_smoothed_per_million &lt;dbl&gt; 列名が特定の文字列で終わる列を選択 data_owid %&gt;% dplyr::select(location, date, ends_with(c(&quot;cases&quot;, &quot;deaths&quot;))) ## # A tibble: 183,583 x 6 ## location date total_cases new_cases total_deaths new_deaths ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 2020-02-24 5 5 NA NA ## 2 Afghanistan 2020-02-25 5 0 NA NA ## 3 Afghanistan 2020-02-26 5 0 NA NA ## 4 Afghanistan 2020-02-27 5 0 NA NA ## 5 Afghanistan 2020-02-28 5 0 NA NA ## 6 Afghanistan 2020-02-29 5 0 NA NA ## 7 Afghanistan 2020-03-01 5 0 NA NA ## 8 Afghanistan 2020-03-02 5 0 NA NA ## 9 Afghanistan 2020-03-03 5 0 NA NA ## 10 Afghanistan 2020-03-04 5 0 NA NA ## # ... with 183,573 more rows 特定の型の列を選択 data_owid %&gt;% dplyr::select(where(is.character) | where(is.logical)) ## # A tibble: 183,583 x 4 ## iso_code continent location tests_units ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AFG Asia Afghanistan &lt;NA&gt; ## 2 AFG Asia Afghanistan &lt;NA&gt; ## 3 AFG Asia Afghanistan &lt;NA&gt; ## 4 AFG Asia Afghanistan &lt;NA&gt; ## 5 AFG Asia Afghanistan &lt;NA&gt; ## 6 AFG Asia Afghanistan &lt;NA&gt; ## 7 AFG Asia Afghanistan &lt;NA&gt; ## 8 AFG Asia Afghanistan &lt;NA&gt; ## 9 AFG Asia Afghanistan &lt;NA&gt; ## 10 AFG Asia Afghanistan &lt;NA&gt; ## # ... with 183,573 more rows 3.5 列名の変更 データベースの列名（変数名）を変更するときは、dplyr::rename()関数を使用します。 data_owid %&gt;% dplyr::rename(country = location) ## # A tibble: 183,583 x 67 ## iso_code continent country date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 3.6 行のフィルタ データベースの行のフィルタ（特定の条件を満たすデータの抽出）を行うには、dpoyr::filter()関数を使用します。 条件に一致する行 data_owid %&gt;% dplyr::filter(location == &quot;Japan&quot;) ## # A tibble: 833 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JPN Asia Japan 2020-01-22 2 NA NA ## 2 JPN Asia Japan 2020-01-23 2 0 NA ## 3 JPN Asia Japan 2020-01-24 2 0 NA ## 4 JPN Asia Japan 2020-01-25 2 0 NA ## 5 JPN Asia Japan 2020-01-26 4 2 NA ## 6 JPN Asia Japan 2020-01-27 4 0 NA ## 7 JPN Asia Japan 2020-01-28 7 3 0.714 ## 8 JPN Asia Japan 2020-01-29 7 0 0.714 ## 9 JPN Asia Japan 2020-01-30 11 4 1.29 ## 10 JPN Asia Japan 2020-01-31 15 4 1.86 ## # ... with 823 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 条件に一致しない行（NOT条件） NOT条件は!=演算子を使用します。 data_owid %&gt;% dplyr::filter(continent != &quot;Asia&quot;) ## # A tibble: 133,644 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ALB Europe Albania 2020-02-25 NA NA NA ## 2 ALB Europe Albania 2020-02-26 NA NA NA ## 3 ALB Europe Albania 2020-02-27 NA NA NA ## 4 ALB Europe Albania 2020-02-28 NA NA NA ## 5 ALB Europe Albania 2020-02-29 NA NA NA ## 6 ALB Europe Albania 2020-03-01 NA NA NA ## 7 ALB Europe Albania 2020-03-02 NA NA NA ## 8 ALB Europe Albania 2020-03-03 NA NA NA ## 9 ALB Europe Albania 2020-03-04 NA NA NA ## 10 ALB Europe Albania 2020-03-05 NA NA NA ## # ... with 133,634 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 複数条件 dplyr::filter()関数内で複数条件を指定すると、左から順番に条件を適用します。 data_owid %&gt;% dplyr::filter(location == &quot;Japan&quot;, date &gt;= &quot;2021-01-01&quot;, date &lt;= &quot;2021-01-07&quot;) ## # A tibble: 7 x 67 ## iso_code continent location date total_cases new_cases new_cases_smooth~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JPN Asia Japan 2021-01-01 239005 3256 3502. ## 2 JPN Asia Japan 2021-01-02 242076 3071 3385. ## 3 JPN Asia Japan 2021-01-03 245242 3166 3417. ## 4 JPN Asia Japan 2021-01-04 248585 3343 3552. ## 5 JPN Asia Japan 2021-01-05 253534 4949 3741. ## 6 JPN Asia Japan 2021-01-06 259583 6049 4052. ## 7 JPN Asia Japan 2021-01-07 267225 7642 4497. ## # ... with 60 more variables: total_deaths &lt;dbl&gt;, new_deaths &lt;dbl&gt;, ## # new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... AND・OR条件を明示的に指定した複数条件 左から順番に条件を適用しないためには、&amp;演算子と|演算子で明示的にAND条件とOR条件を指定します。 data_owid %&gt;% dplyr::filter((date == &quot;2022-01-01&quot;) &amp; (location == &quot;Japan&quot; | location == &quot;United States&quot;)) ## # A tibble: 2 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JPN Asia Japan 2022-01-01 1732752 456 344. ## 2 USA North Ame~ United ~ 2022-01-01 55024579 188726 405159. ## # ... with 60 more variables: total_deaths &lt;dbl&gt;, new_deaths &lt;dbl&gt;, ## # new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... %in%演算子によるOR条件 複数の値が格納されたベクトルと%in%演算子を用いて、OR条件で行をフィルタします。この場合は、日本と米国のレコードを抽出しています。 locations &lt;- c(&quot;Japan&quot;, &quot;United States&quot;) data_owid %&gt;% dplyr::filter(location %in% locations, date == &quot;2021-01-01&quot;) ## # A tibble: 2 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JPN Asia Japan 2021-01-01 239005 3256 3502. ## 2 USA North Ame~ United ~ 2021-01-01 20370235 178904 206422. ## # ... with 60 more variables: total_deaths &lt;dbl&gt;, new_deaths &lt;dbl&gt;, ## # new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... OR条件の否定 %in%演算子によるOR条件を!で否定します。この場合は、日本・米国以外を抽出しています。 data_owid %&gt;% dplyr::filter(!location %in% locations, date == &quot;2021-01-01&quot;) ## # A tibble: 225 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2021-01-01 52513 183 131. ## 2 OWID_AFR &lt;NA&gt; Africa 2021-01-01 2788203 27749 23359. ## 3 ALB Europe Albania 2021-01-01 58316 0 419. ## 4 DZA Africa Algeria 2021-01-01 99897 287 351. ## 5 AND Europe Andorra 2021-01-01 8117 68 51.6 ## 6 AGO Africa Angola 2021-01-01 17568 15 67 ## 7 AIA North Am~ Anguilla 2021-01-01 13 0 0.286 ## 8 ATG North Am~ Antigua~ 2021-01-01 159 0 0.571 ## 9 ARG South Am~ Argenti~ 2021-01-01 1629594 4080 7863. ## 10 ARM Asia Armenia 2021-01-01 159738 329 425 ## # ... with 215 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 関数による条件指定 data_owid %&gt;% dplyr::filter(date == max(date)) ## # A tibble: 229 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2022-05-03 178901 0 18.9 ## 2 OWID_AFR &lt;NA&gt; Africa 2022-05-03 11687065 4228 13856. ## 3 ALB Europe Albania 2022-05-03 275191 14 47 ## 4 DZA Africa Algeria 2022-05-03 265782 0 1.43 ## 5 AND Europe Andorra 2022-05-03 41349 NA NA ## 6 AGO Africa Angola 2022-05-03 99287 0 0 ## 7 AIA North Am~ Anguilla 2022-05-03 2788 0 0 ## 8 ATG North Am~ Antigua~ 2022-05-03 7626 0 7.86 ## 9 ARG South Am~ Argenti~ 2022-05-03 9083673 NA NA ## 10 ARM Asia Armenia 2022-05-03 422874 0 5.14 ## # ... with 219 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 論理値を返す関数による条件指定 is.na()関数のように倫理値を返す関数は、==演算子がなくてもフィルタ条件として使用することができます。 data_owid %&gt;% dplyr::filter(is.na(new_cases)) ## # A tibble: 7,052 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-03-20 24 NA NA ## 2 AFG Asia Afghani~ 2022-01-03 158183 NA NA ## 3 ALB Europe Albania 2020-02-25 NA NA NA ## 4 ALB Europe Albania 2020-02-26 NA NA NA ## 5 ALB Europe Albania 2020-02-27 NA NA NA ## 6 ALB Europe Albania 2020-02-28 NA NA NA ## 7 ALB Europe Albania 2020-02-29 NA NA NA ## 8 ALB Europe Albania 2020-03-01 NA NA NA ## 9 ALB Europe Albania 2020-03-02 NA NA NA ## 10 ALB Europe Albania 2020-03-03 NA NA NA ## # ... with 7,042 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 3.7 行の並べ替え データベースの行を並べ替えるには、dplyr::arrange()関数を使用します。 昇順ソート data_owid %&gt;% dplyr::arrange(new_cases) ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 2 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 6 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 8 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-04 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-05 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 降順ソート data_owid %&gt;% dplyr::arrange(-new_cases) ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 OWID_WRL &lt;NA&gt; World 2022-01-19 339455869 4089131 3097711. ## 2 OWID_WRL &lt;NA&gt; World 2022-01-21 346997234 3835779 3246765. ## 3 OWID_WRL &lt;NA&gt; World 2022-01-18 335366738 3760743 3006842. ## 4 OWID_WRL &lt;NA&gt; World 2022-01-27 366735168 3756366 3367673. ## 5 OWID_WRL &lt;NA&gt; World 2022-01-20 343161455 3705586 3172508. ## 6 OWID_WRL &lt;NA&gt; World 2022-01-26 362978802 3662351 3360419 ## 7 OWID_WRL &lt;NA&gt; World 2022-01-25 359316451 3651057 3421388. ## 8 OWID_WRL &lt;NA&gt; World 2022-01-28 370355233 3620065 3336857 ## 9 OWID_WRL &lt;NA&gt; World 2022-01-12 317771889 3453047 2784335 ## 10 OWID_WRL &lt;NA&gt; World 2022-01-24 355665394 3422496 3437057 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 降順ソート（日付型） 日付型の変数は-演算子で降順ソートができないため、desc()関数を使用します。 data_owid %&gt;% dplyr::arrange(desc(date)) ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2022-05-03 178901 0 18.9 ## 2 OWID_AFR &lt;NA&gt; Africa 2022-05-03 11687065 4228 13856. ## 3 ALB Europe Albania 2022-05-03 275191 14 47 ## 4 DZA Africa Algeria 2022-05-03 265782 0 1.43 ## 5 AND Europe Andorra 2022-05-03 41349 NA NA ## 6 AGO Africa Angola 2022-05-03 99287 0 0 ## 7 AIA North Am~ Anguilla 2022-05-03 2788 0 0 ## 8 ATG North Am~ Antigua~ 2022-05-03 7626 0 7.86 ## 9 ARG South Am~ Argenti~ 2022-05-03 9083673 NA NA ## 10 ARM Asia Armenia 2022-05-03 422874 0 5.14 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 複数条件によるソート dplyr::arrange()関数内で複数条件を指定すると、左から順番に適用します。 data_owid %&gt;% dplyr::arrange(desc(date), -new_cases) ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 OWID_WRL &lt;NA&gt; World 2022-05-03 514918067 652442 582815. ## 2 OWID_HIC &lt;NA&gt; High in~ 2022-05-03 294509144 580750 486536. ## 3 OWID_EUR &lt;NA&gt; Europe 2022-05-03 193346839 341458 283095. ## 4 OWID_EUN &lt;NA&gt; Europea~ 2022-05-03 137870945 282181 260572. ## 5 OWID_ASI &lt;NA&gt; Asia 2022-05-03 149287995 160539 148162. ## 6 DEU Europe Germany 2022-05-03 25033970 106631 99511. ## 7 OWID_NAM &lt;NA&gt; North A~ 2022-05-03 96483153 69157 69390. ## 8 FRA Europe France 2022-05-03 28811847 67017 48943. ## 9 OWID_UMC &lt;NA&gt; Upper m~ 2022-05-03 127929994 63496 75529. ## 10 ITA Europe Italy 2022-05-03 16586268 62409 56421. ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 3.8 列の追加・修正 データベースの列を追加・修正するには、dplyr::mutate()関数を使用します。 まず、使用するサンプルデータを作成します。 # サンプルデータの作成 data_owid_jp &lt;- data_owid %&gt;% dplyr::select(location, date, new_cases, new_deaths) %&gt;% dplyr::filter(location == &quot;Japan&quot;, date &gt;= &quot;2022-01-01&quot;) 新たな変数の作成 既存の変数の計算結果として、新たな変数を追加します。その際、.before引数もしくは.after引数に既存の列名を指定すると、指定した列の前後に新たな変数を挿入します。.before引数、.after引数を指定しなければ、新たな変数は最右列に追加されます。 data_owid_jp %&gt;% dplyr::mutate(death_rate = new_deaths / new_cases, .after = &quot;date&quot;) ## # A tibble: 123 x 5 ## location date death_rate new_cases new_deaths ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Japan 2022-01-01 0 456 0 ## 2 Japan 2022-01-02 0.00419 477 2 ## 3 Japan 2022-01-03 0.00149 672 1 ## 4 Japan 2022-01-04 0.000870 1149 1 ## 5 Japan 2022-01-05 0.000402 2490 1 ## 6 Japan 2022-01-06 0.000233 4297 1 ## 7 Japan 2022-01-07 0.000165 6070 1 ## 8 Japan 2022-01-08 0.000241 8302 2 ## 9 Japan 2022-01-09 0.000124 8071 1 ## 10 Japan 2022-01-10 0.000319 6265 2 ## # ... with 113 more rows 既存の列の修正 data_owid %&gt;% dplyr::mutate(location = factor(location)) ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... ラグ・リード系列の作成 dplyr::lag()関数とdplyr::leag()関数で、既存の変数のラグ・リード系列を作成します。 # 1期ラグの変数を追加 data_owid_jp %&gt;% dplyr::mutate(new_cases_lag = dplyr::lag(new_cases, n = 1)) ## # A tibble: 123 x 5 ## location date new_cases new_deaths new_cases_lag ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Japan 2022-01-01 456 0 NA ## 2 Japan 2022-01-02 477 2 456 ## 3 Japan 2022-01-03 672 1 477 ## 4 Japan 2022-01-04 1149 1 672 ## 5 Japan 2022-01-05 2490 1 1149 ## 6 Japan 2022-01-06 4297 1 2490 ## 7 Japan 2022-01-07 6070 1 4297 ## 8 Japan 2022-01-08 8302 2 6070 ## 9 Japan 2022-01-09 8071 1 8302 ## 10 Japan 2022-01-10 6265 2 8071 ## # ... with 113 more rows 変化率系列の作成 dplyr::lag()関数で、既存の変数の変化率の系列を作成します。 # 前期比変化率の系列を追加 data_owid_jp %&gt;% dplyr::mutate(new_cases_chg = new_cases / dplyr::lag(new_cases, n = 1)) ## # A tibble: 123 x 5 ## location date new_cases new_deaths new_cases_chg ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Japan 2022-01-01 456 0 NA ## 2 Japan 2022-01-02 477 2 1.05 ## 3 Japan 2022-01-03 672 1 1.41 ## 4 Japan 2022-01-04 1149 1 1.71 ## 5 Japan 2022-01-05 2490 1 2.17 ## 6 Japan 2022-01-06 4297 1 1.73 ## 7 Japan 2022-01-07 6070 1 1.41 ## 8 Japan 2022-01-08 8302 2 1.37 ## 9 Japan 2022-01-09 8071 1 0.972 ## 10 Japan 2022-01-10 6265 2 0.776 ## # ... with 113 more rows 移動平均系列の作成 zoo::rollmean()関数で、移動平均系列を作成します。 # 後方7日移動平均の系列を追加 data_owid_jp %&gt;% dplyr::mutate(new_cases_7dma = zoo::rollmean(new_cases, # 移動平均を作成するもとの系列名 k = 7, # 移動平均の期間 na.pad = TRUE, # 系列の先端部分で移動平均を計算できない箇所をNAで埋めるか align = &quot;right&quot;)) # left：前方移動平均、center：中央移動平均、right：後方移動平均 ## # A tibble: 123 x 5 ## location date new_cases new_deaths new_cases_7dma ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Japan 2022-01-01 456 0 NA ## 2 Japan 2022-01-02 477 2 NA ## 3 Japan 2022-01-03 672 1 NA ## 4 Japan 2022-01-04 1149 1 NA ## 5 Japan 2022-01-05 2490 1 NA ## 6 Japan 2022-01-06 4297 1 NA ## 7 Japan 2022-01-07 6070 1 2230. ## 8 Japan 2022-01-08 8302 2 3351 ## 9 Japan 2022-01-09 8071 1 4436. ## 10 Japan 2022-01-10 6265 2 5235. ## # ... with 113 more rows 条件付き系列の作成 dplyr::case_when()関数で、既存の変数が特定の条件を満たす場合にとる値を指定し、新たな系列を作成します。ダミー変数の作成に活用できます。複数条件を指定した場合、左から順番に適用します。「その他すべて」はTRUEで指定します。 data_owid_jp %&gt;% dplyr::mutate(case = dplyr::case_when(new_cases &lt; 1000 ~ &quot;A&quot;, (new_cases &gt;= 5000 &amp; new_cases &lt; 8000) ~ &quot;B&quot;, TRUE ~ &quot;other&quot;)) ## # A tibble: 123 x 5 ## location date new_cases new_deaths case ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Japan 2022-01-01 456 0 A ## 2 Japan 2022-01-02 477 2 A ## 3 Japan 2022-01-03 672 1 A ## 4 Japan 2022-01-04 1149 1 other ## 5 Japan 2022-01-05 2490 1 other ## 6 Japan 2022-01-06 4297 1 other ## 7 Japan 2022-01-07 6070 1 B ## 8 Japan 2022-01-08 8302 2 other ## 9 Japan 2022-01-09 8071 1 other ## 10 Japan 2022-01-10 6265 2 B ## # ... with 113 more rows 複数変数の一括処理 dplyr::mutate()関数内でacross()関数を用い、対象になる変数と処理方法を指定し、一括処理します。~ {}は無名関数（ラムダ式）を表し、波括弧の中のドットはチルダの左側の値を代入することを意味します。 # new_casesからnew_deathまでのすべての変数を1000で除す data_owid_jp %&gt;% dplyr::mutate(across(new_cases:new_deaths, ~ {. / 1000})) ## # A tibble: 123 x 4 ## location date new_cases new_deaths ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Japan 2022-01-01 0.456 0 ## 2 Japan 2022-01-02 0.477 0.002 ## 3 Japan 2022-01-03 0.672 0.001 ## 4 Japan 2022-01-04 1.15 0.001 ## 5 Japan 2022-01-05 2.49 0.001 ## 6 Japan 2022-01-06 4.30 0.001 ## 7 Japan 2022-01-07 6.07 0.001 ## 8 Japan 2022-01-08 8.30 0.002 ## 9 Japan 2022-01-09 8.07 0.001 ## 10 Japan 2022-01-10 6.26 0.002 ## # ... with 113 more rows # new_casesからnew_deathまでのすべての変数の前期比変化率を計算 data_owid_jp %&gt;% dplyr::mutate(across(new_cases:new_deaths, ~ {. / dplyr::lag(., n = 1)})) ## # A tibble: 123 x 4 ## location date new_cases new_deaths ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Japan 2022-01-01 NA NA ## 2 Japan 2022-01-02 1.05 Inf ## 3 Japan 2022-01-03 1.41 0.5 ## 4 Japan 2022-01-04 1.71 1 ## 5 Japan 2022-01-05 2.17 1 ## 6 Japan 2022-01-06 1.73 1 ## 7 Japan 2022-01-07 1.41 1 ## 8 Japan 2022-01-08 1.37 2 ## 9 Japan 2022-01-09 0.972 0.5 ## 10 Japan 2022-01-10 0.776 2 ## # ... with 113 more rows 3.9 グループ化 データベースを属性ごとにグループ化するには、dplyr::group_by()関数を使用します。グループ化するだけでは変化はありませんが、dplyr::filter()関数や、次のdplyr::summarise()関数とあわせて使用することで、より柔軟なデータベース操作が可能になります。 単一変数でグループ化 見た目は変わりませんが、データを出力すると2行目にGroupsが追加されています。 data_owid %&gt;% dplyr::group_by(location) ## # A tibble: 183,583 x 67 ## # Groups: location [243] ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 複数変数でグループ化 data_owid %&gt;% dplyr::group_by(continent, location) ## # A tibble: 183,583 x 67 ## # Groups: continent, location [243] ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... グループ化＆フィルタ グループ化と行のフィルタを組み合わせて、グループ別にフィルタを適用します。ここでは、グループ別の最大値を抽出しています。 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::filter(new_cases == max(new_cases)) ## # A tibble: 117 x 67 ## # Groups: location [114] ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 OWID_AFR &lt;NA&gt; Africa 2022-04-30 11732241 65341 13717. ## 2 DZA Africa Algeria 2022-01-25 241406 2521 1978. ## 3 AGO Africa Angola 2021-12-28 76787 5035 1460. ## 4 AIA North Am~ Anguilla 2022-01-10 1942 165 38.3 ## 5 OWID_ASI &lt;NA&gt; Asia 2022-03-16 129855525 1102240 856138. ## 6 AUT Europe Austria 2022-03-16 3283855 58583 44458. ## 7 BHR Asia Bahrain 2022-02-01 382748 8173 6318. ## 8 BGD Asia Banglad~ 2021-07-28 1210982 16230 10640. ## 9 BRB North Am~ Barbados 2022-01-19 37063 1329 536 ## 10 BLR Europe Belarus 2022-02-13 831966 8921 7796. ## # ... with 107 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... グループ化の解除 dplyr::ungroup()関数でグループ化を解除します。グループ化の有無でフィルタや集計の結果が変わるため、思わぬ事故を防ぐためにも、所定の結果を得た後はグループ化を解除しておくことを推奨します。 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::ungroup() ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 3.10 集計 グループ化したデータベースに対してdplyr::summarise()関数を使用すると、グループ別に集計操作を行うことができます。 グループ別の集計 # 指定した列のグループ別の平均値を計算 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::summarise(new_cases_mean = mean(new_cases, na.rm = TRUE)) ## # A tibble: 243 x 2 ## location new_cases_mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 Afghanistan 224. ## 2 Africa 14462. ## 3 Albania 350. ## 4 Algeria 333. ## 5 Andorra 52.5 ## 6 Angola 128. ## 7 Anguilla 3.63 ## 8 Antigua and Barbuda 9.78 ## 9 Argentina 11498. ## 10 Armenia 533. ## # ... with 233 more rows # 指定した列のグループ別の最大値を計算 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::summarise(new_cases_max = max(new_cases, na.rm = TRUE)) ## # A tibble: 243 x 2 ## location new_cases_max ## &lt;chr&gt; &lt;dbl&gt; ## 1 Afghanistan 3243 ## 2 Africa 65341 ## 3 Albania 4789 ## 4 Algeria 2521 ## 5 Andorra 2313 ## 6 Angola 5035 ## 7 Anguilla 165 ## 8 Antigua and Barbuda 468 ## 9 Argentina 139853 ## 10 Armenia 4388 ## # ... with 233 more rows クロス集計 dplyr::group_by()関数で複数条件を指定してグループ化すると、クロス集計を行うことができます。 data_owid %&gt;% dplyr::group_by(location, lubridate::year(date)) %&gt;% dplyr::summarise(new_cases_mean = mean(new_cases, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;location&#39;. You can override using the ## `.groups` argument. ## # A tibble: 708 x 3 ## # Groups: location [243] ## location `lubridate::year(date)` new_cases_mean ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 2020 168. ## 2 Afghanistan 2021 290. ## 3 Afghanistan 2022 171. ## 4 Africa 2020 8548. ## 5 Africa 2021 19116. ## 6 Africa 2022 16183. ## 7 Albania 2020 196. ## 8 Albania 2021 416. ## 9 Albania 2022 528. ## 10 Algeria 2020 320. ## # ... with 698 more rows 複数変数の一括処理 dplyr::summarise()関数内でacross()関数を用い、対象になる変数と処理方法を指定し、一括処理します。 # new_cases変数とnew_deaths変数について、グループ別の合計値を計算 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::summarise(across(c(new_cases, new_deaths), sum, na.rm = TRUE)) ## # A tibble: 243 x 3 ## location new_cases new_deaths ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 178909 7683 ## 2 Africa 11728849 252685 ## 3 Albania 275191 3496 ## 4 Algeria 265782 6875 ## 5 Andorra 41349 155 ## 6 Angola 99287 1903 ## 7 Anguilla 2788 10 ## 8 Antigua and Barbuda 7628 136 ## 9 Argentina 9083673 128653 ## 10 Armenia 422874 8624 ## # ... with 233 more rows # casesで終わる変数すべてについて、グループ別の合計値を計算 # per_millionで終わる変数すべてについて、グループ別の平均値を計算 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::summarise(across(ends_with(&quot;cases&quot;), sum, na.rm = TRUE), across(ends_with(&quot;per_million&quot;), mean, na.rm = TRUE)) ## # A tibble: 243 x 15 ## location total_cases new_cases total_cases_per_m~ new_cases_per_m~ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 69069879 178909 2167. 5.63 ## 2 Africa 3888683399 11728849 3495. 10.5 ## 3 Albania 87057585 275191 38553. 122. ## 4 Algeria 99213084 265782 2783. 7.46 ## 5 Andorra 10296811 41349 167860. 678. ## 6 Angola 28113289 99287 1069. 3.78 ## 7 Anguilla 435581 2788 37547. 240. ## 8 Antigua and Barbuda 1563076 7628 20246. 99.1 ## 9 Argentina 2630066969 9083673 72815. 252. ## 10 Armenia 149995330 422874 63647. 179. ## # ... with 233 more rows, and 10 more variables: ## # new_cases_smoothed_per_million &lt;dbl&gt;, total_deaths_per_million &lt;dbl&gt;, ## # new_deaths_per_million &lt;dbl&gt;, new_deaths_smoothed_per_million &lt;dbl&gt;, ## # icu_patients_per_million &lt;dbl&gt;, hosp_patients_per_million &lt;dbl&gt;, ## # weekly_icu_admissions_per_million &lt;dbl&gt;, ## # weekly_hosp_admissions_per_million &lt;dbl&gt;, ## # new_vaccinations_smoothed_per_million &lt;dbl&gt;, ... # 数値型の変数すべてについて、グループ別の平均値を計算 data_owid %&gt;% dplyr::group_by(location) %&gt;% dplyr::summarise(across(is.double, mean, na.rm = TRUE)) ## # A tibble: 243 x 64 ## location date total_cases new_cases new_cases_smoot~ total_deaths ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 2021-03-29 86337. 224. 226. 3892. ## 2 Africa 2021-03-24 4800844. 14462. 14502. 119758. ## 3 Albania 2021-03-30 110760. 350. 352. 1760. ## 4 Algeria 2021-03-30 124172. 333. 335. 3536. ## 5 Andorra 2021-04-02 12985. 52.5 52.4 102. ## 6 Angola 2021-04-11 36275. 128. 129. 832. ## 7 Anguilla 2021-04-15 568. 3.63 3.66 5.66 ## 8 Antigua and B~ 2021-04-07 1999. 9.78 9.83 47.1 ## 9 Argentina 2021-03-02 3320792. 11498. 11559. 64575. ## 10 Armenia 2021-03-19 188911. 533. 536. 3922. ## # ... with 233 more rows, and 58 more variables: new_deaths &lt;dbl&gt;, ## # new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... 3.11 縦型・横型の変換 tidyrパッケージのpivot_longer()関数とpivot_wider()関数を使用して、縦型データ（tidy data）と横型データの変換を行います。縦型データは、ggplot2パッケージによるグラフ作成で多用します。 まず、使用するサンプルデータを作成します。 # サンプルデータの作成 data_owid_cases &lt;- data_owid %&gt;% dplyr::select(location, date, new_cases) %&gt;% dplyr::filter(date &gt;= &quot;2021-01-01&quot;) %&gt;% dplyr::arrange(date) print(data_owid_cases) ## # A tibble: 115,473 x 3 ## location date new_cases ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 Afghanistan 2021-01-01 183 ## 2 Africa 2021-01-01 27749 ## 3 Albania 2021-01-01 0 ## 4 Algeria 2021-01-01 287 ## 5 Andorra 2021-01-01 68 ## 6 Angola 2021-01-01 15 ## 7 Anguilla 2021-01-01 0 ## 8 Antigua and Barbuda 2021-01-01 0 ## 9 Argentina 2021-01-01 4080 ## 10 Armenia 2021-01-01 329 ## # ... with 115,463 more rows 縦型データを横型データに変換 data_owid_cases_wide &lt;- data_owid_cases %&gt;% tidyr::pivot_wider(id_cols = &quot;date&quot;, names_from = &quot;location&quot;, values_from = &quot;new_cases&quot;) print(data_owid_cases_wide) ## # A tibble: 488 x 244 ## date Afghanistan Africa Albania Algeria Andorra Angola Anguilla ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-01-01 183 27749 0 287 68 15 0 ## 2 2021-01-02 73 22890 675 262 49 40 0 ## 3 2021-01-03 123 21995 447 249 26 34 2 ## 4 2021-01-04 200 21775 185 237 57 42 0 ## 5 2021-01-05 102 26845 660 228 59 72 0 ## 6 2021-01-06 94 35789 725 247 40 108 0 ## 7 2021-01-07 102 35437 697 262 0 110 0 ## 8 2021-01-08 125 36440 673 275 141 92 0 ## 9 2021-01-09 68 35072 655 256 97 90 0 ## 10 2021-01-10 89 31638 562 231 0 37 0 ## # ... with 478 more rows, and 236 more variables: `Antigua and Barbuda` &lt;dbl&gt;, ## # Argentina &lt;dbl&gt;, Armenia &lt;dbl&gt;, Aruba &lt;dbl&gt;, Asia &lt;dbl&gt;, Australia &lt;dbl&gt;, ## # Austria &lt;dbl&gt;, Azerbaijan &lt;dbl&gt;, Bahamas &lt;dbl&gt;, Bahrain &lt;dbl&gt;, ## # Bangladesh &lt;dbl&gt;, Barbados &lt;dbl&gt;, Belarus &lt;dbl&gt;, Belgium &lt;dbl&gt;, ## # Belize &lt;dbl&gt;, Benin &lt;dbl&gt;, Bermuda &lt;dbl&gt;, Bhutan &lt;dbl&gt;, Bolivia &lt;dbl&gt;, ## # `Bonaire Sint Eustatius and Saba` &lt;dbl&gt;, `Bosnia and Herzegovina` &lt;dbl&gt;, ## # Botswana &lt;dbl&gt;, Brazil &lt;dbl&gt;, `British Virgin Islands` &lt;dbl&gt;, ... 横型データを縦型データに変換 data_owid_cases_long &lt;- data_owid_cases_wide %&gt;% tidyr::pivot_longer(cols = -&quot;date&quot;, names_to = &quot;location&quot;, values_to = &quot;new_cases&quot;) print(data_owid_cases_long) ## # A tibble: 118,584 x 3 ## date location new_cases ## &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2021-01-01 Afghanistan 183 ## 2 2021-01-01 Africa 27749 ## 3 2021-01-01 Albania 0 ## 4 2021-01-01 Algeria 287 ## 5 2021-01-01 Andorra 68 ## 6 2021-01-01 Angola 15 ## 7 2021-01-01 Anguilla 0 ## 8 2021-01-01 Antigua and Barbuda 0 ## 9 2021-01-01 Argentina 4080 ## 10 2021-01-01 Armenia 329 ## # ... with 118,574 more rows 3.12 データの結合 複数のデータベースのオブジェクトを結合して一つのデータベースにするには、dplyrパッケージのjoin()関数ファミリーを使用します。join()関数は、結合方法によって4種類に分かれています。 まず、使用するサンプルデータを確認します。 print(band_members) ## # A tibble: 3 x 2 ## name band ## &lt;chr&gt; &lt;chr&gt; ## 1 Mick Stones ## 2 John Beatles ## 3 Paul Beatles print(band_instruments) ## # A tibble: 3 x 2 ## name plays ## &lt;chr&gt; &lt;chr&gt; ## 1 John guitar ## 2 Paul bass ## 3 Keith guitar 内部結合 dplyr::inner_join()関数は、両方のデータにある行のみ結合し、その他の行は削除します。 band_members %&gt;% dplyr::inner_join(band_instruments, by = &quot;name&quot;) ## # A tibble: 2 x 3 ## name band plays ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John Beatles guitar ## 2 Paul Beatles bass 左外部結合 dplyr::left_join()関数は、左のデータにある行のみ結合し、その他の行は削除します。 band_members %&gt;% dplyr::left_join(band_instruments, by = &quot;name&quot;) ## # A tibble: 3 x 3 ## name band plays ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Mick Stones &lt;NA&gt; ## 2 John Beatles guitar ## 3 Paul Beatles bass 右外部結合 dplyr::right_join()関数は、右のデータにある行のみ結合し、その他の行は削除します。 band_members %&gt;% dplyr::right_join(band_instruments, by = &quot;name&quot;) ## # A tibble: 3 x 3 ## name band plays ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John Beatles guitar ## 2 Paul Beatles bass ## 3 Keith &lt;NA&gt; guitar 完全外部結合 dplyr::full_join()関数は、両方のデータのすべての行を結合し、行を削除しません。 band_members %&gt;% dplyr::full_join(band_instruments, by = &quot;name&quot;) ## # A tibble: 4 x 3 ## name band plays ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Mick Stones &lt;NA&gt; ## 2 John Beatles guitar ## 3 Paul Beatles bass ## 4 Keith &lt;NA&gt; guitar 3.13 重複処理 重複している行を削除し、一意なレコードにするには、dplyr::distinct()関数を使用します。 # すべての列が重複している行を削除 data_owid %&gt;% dplyr::distinct() ## # A tibble: 183,583 x 67 ## iso_code continent location date total_cases new_cases new_cases_smoot~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AFG Asia Afghani~ 2020-02-24 5 5 NA ## 2 AFG Asia Afghani~ 2020-02-25 5 0 NA ## 3 AFG Asia Afghani~ 2020-02-26 5 0 NA ## 4 AFG Asia Afghani~ 2020-02-27 5 0 NA ## 5 AFG Asia Afghani~ 2020-02-28 5 0 NA ## 6 AFG Asia Afghani~ 2020-02-29 5 0 0.714 ## 7 AFG Asia Afghani~ 2020-03-01 5 0 0.714 ## 8 AFG Asia Afghani~ 2020-03-02 5 0 0 ## 9 AFG Asia Afghani~ 2020-03-03 5 0 0 ## 10 AFG Asia Afghani~ 2020-03-04 5 0 0 ## # ... with 183,573 more rows, and 60 more variables: total_deaths &lt;dbl&gt;, ## # new_deaths &lt;dbl&gt;, new_deaths_smoothed &lt;dbl&gt;, total_cases_per_million &lt;dbl&gt;, ## # new_cases_per_million &lt;dbl&gt;, new_cases_smoothed_per_million &lt;dbl&gt;, ## # total_deaths_per_million &lt;dbl&gt;, new_deaths_per_million &lt;dbl&gt;, ## # new_deaths_smoothed_per_million &lt;dbl&gt;, reproduction_rate &lt;dbl&gt;, ## # icu_patients &lt;dbl&gt;, icu_patients_per_million &lt;dbl&gt;, hosp_patients &lt;dbl&gt;, ## # hosp_patients_per_million &lt;dbl&gt;, weekly_icu_admissions &lt;dbl&gt;, ... # 指定した列が重複している行を削除 data_owid %&gt;% dplyr::distinct(iso_code, location) ## # A tibble: 243 x 2 ## iso_code location ## &lt;chr&gt; &lt;chr&gt; ## 1 AFG Afghanistan ## 2 OWID_AFR Africa ## 3 ALB Albania ## 4 DZA Algeria ## 5 AND Andorra ## 6 AGO Angola ## 7 AIA Anguilla ## 8 ATG Antigua and Barbuda ## 9 ARG Argentina ## 10 ARM Armenia ## # ... with 233 more rows 3.14 欠損値処理 欠損値（NA）がある行を削除したり、NAのレコードを他の値で置き換えたりするには、tidyrパッケージのdrop_na()関数、replace_na()関数、fill()関数を使用します。 まず、使用するサンプルデータを作成します。 # サンプルデータの作成 data_owid_vaccinated &lt;- data_owid %&gt;% dplyr::select(location, date, people_fully_vaccinated) %&gt;% dplyr::filter(location %in% c(&quot;Japan&quot;, &quot;United States&quot;, &quot;United Kingdom&quot;), date &gt;= &quot;2021-01-01&quot;) %&gt;% dplyr::arrange(date) %&gt;% tidyr::pivot_wider(id_cols = &quot;date&quot;, names_from = &quot;location&quot;, values_from = &quot;people_fully_vaccinated&quot;) tail(data_owid_vaccinated) ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-28 101458832 49727305 219764236 ## 2 2022-04-29 NA NA 219808326 ## 3 2022-04-30 NA NA 219835871 ## 4 2022-05-01 101532326 NA 219845063 ## 5 2022-05-02 NA NA 219849502 ## 6 2022-05-03 NA NA NA NAの削除 指定した変数にNAが含まれている行を削除するには、tidyr::drop_na()関数で変数名を指定します。 data_owid_vaccinated %&gt;% tidyr::drop_na(Japan) %&gt;% tail() ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-21 101259062 49661362 219478122 ## 2 2022-04-24 101354923 49695725 219580079 ## 3 2022-04-25 101399919 49703318 219625289 ## 4 2022-04-26 101432143 49711368 219670386 ## 5 2022-04-28 101458832 49727305 219764236 ## 6 2022-05-01 101532326 NA 219845063 少なくとも1つの変数にNAが含まれている行を削除するには、tidyr::drop_na()関数の中でeverything()関数を使用します。 data_owid_vaccinated %&gt;% tidyr::drop_na(everything()) %&gt;% tail() ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-20 101238428 49651320 219425955 ## 2 2022-04-21 101259062 49661362 219478122 ## 3 2022-04-24 101354923 49695725 219580079 ## 4 2022-04-25 101399919 49703318 219625289 ## 5 2022-04-26 101432143 49711368 219670386 ## 6 2022-04-28 101458832 49727305 219764236 NAの置換 ある変数のNAを別の値に置換するには、tidyr::replace_na()関数で変数と置換する値を指定します。 data_owid_vaccinated %&gt;% dplyr::mutate(Japan = tidyr::replace_na(data = Japan, replace = 0)) %&gt;% tail() ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-28 101458832 49727305 219764236 ## 2 2022-04-29 0 NA 219808326 ## 3 2022-04-30 0 NA 219835871 ## 4 2022-05-01 101532326 NA 219845063 ## 5 2022-05-02 0 NA 219849502 ## 6 2022-05-03 0 NA NA 置換対象の変数が複数ある場合は、dplyr::mutate_at()関数で変数を複数指定して一括処理します。 data_owid_vaccinated %&gt;% dplyr::mutate_at(vars(-date), tidyr::replace_na, replace = 0) %&gt;% tail() ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-28 101458832 49727305 219764236 ## 2 2022-04-29 0 0 219808326 ## 3 2022-04-30 0 0 219835871 ## 4 2022-05-01 101532326 0 219845063 ## 5 2022-05-02 0 0 219849502 ## 6 2022-05-03 0 0 0 NAのフィル ある変数のNAを同じ変数の前後の値でフィルするには、tidyr::fill()関数で変数を指定します。.direction引数が\"down\"なら上の値でフィル、\"up\"なら下の値でフィルします。 data_owid_vaccinated %&gt;% tidyr::fill(Japan, .direction = &quot;down&quot;) %&gt;% tail() ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-28 101458832 49727305 219764236 ## 2 2022-04-29 101458832 NA 219808326 ## 3 2022-04-30 101458832 NA 219835871 ## 4 2022-05-01 101532326 NA 219845063 ## 5 2022-05-02 101532326 NA 219849502 ## 6 2022-05-03 101532326 NA NA すべての列のNAの値をフィルする場合は、tidyr::fill()関数の中でeverything()関数を使用します。 data_owid_vaccinated %&gt;% tidyr::fill(c(-date, everything()), .direction = &quot;down&quot;) %&gt;% tail() ## # A tibble: 6 x 4 ## date Japan `United Kingdom` `United States` ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2022-04-28 101458832 49727305 219764236 ## 2 2022-04-29 101458832 49727305 219808326 ## 3 2022-04-30 101458832 49727305 219835871 ## 4 2022-05-01 101532326 49727305 219845063 ## 5 2022-05-02 101532326 49727305 219849502 ## 6 2022-05-03 101532326 49727305 219849502 3.15 補完処理 データベースに複数の属性があり、特定の属性の組み合わせのレコードが含まれていない（欠損している）場合、tidyr::complete()関数で補完することができます。 まず、使用するサンプルデータを作成します。 # サンプルデータの作成 data_complete_1 &lt;- tibble( group = c(1:2, 1, 2), item_id = c(1:2, 2, 3), item_name = c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;), value1 = c(1, NA, 3, 4), value2 = 4:7 ) print(data_complete_1) ## # A tibble: 4 x 5 ## group item_id item_name value1 value2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1 a 1 4 ## 2 2 2 a NA 5 ## 3 1 2 b 3 6 ## 4 2 3 b 4 7 data_complete_2 &lt;- tibble( date = as.Date(c(&quot;2022-01-01&quot;, &quot;2022-01-03&quot;, &quot;2022-01-04&quot;)), value = c(11, 13, 14) ) print(data_complete_2) ## # A tibble: 3 x 2 ## date value ## &lt;date&gt; &lt;dbl&gt; ## 1 2022-01-01 11 ## 2 2022-01-03 13 ## 3 2022-01-04 14 組み合わせ候補の補完 tidyr::complete()関数の中で変数を指定し、当該変数のすべての組み合わせ候補を補完します。補完した行の値はNAになります。 data_complete_1 %&gt;% tidyr::complete(group, item_id, item_name) ## # A tibble: 12 x 5 ## group item_id item_name value1 value2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1 a 1 4 ## 2 1 1 b NA NA ## 3 1 2 a NA NA ## 4 1 2 b 3 6 ## 5 1 3 a NA NA ## 6 1 3 b NA NA ## 7 2 1 a NA NA ## 8 2 1 b NA NA ## 9 2 2 a NA 5 ## 10 2 2 b NA NA ## 11 2 3 a NA NA ## 12 2 3 b 4 7 tidyr::nesting()関数に複数の変数を指定すると、それらの変数について実現値のユニークな組み合わせをあらかじめ求め、それと別の変数のすべての組み合わせ候補を補完します。 data_complete_1 %&gt;% tidyr::complete(group, tidyr::nesting(item_id, item_name)) ## # A tibble: 8 x 5 ## group item_id item_name value1 value2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1 a 1 4 ## 2 1 2 a NA NA ## 3 1 2 b 3 6 ## 4 1 3 b NA NA ## 5 2 1 a NA NA ## 6 2 2 a NA 5 ## 7 2 2 b NA NA ## 8 2 3 b 4 7 時系列データの補完 時系列データの欠損期間を補完するには、full_seq()関数を使用します。 # 日次データの欠損日を補完 data_complete_2 %&gt;% tidyr::complete(date = full_seq(date, period = 1)) ## # A tibble: 4 x 2 ## date value ## &lt;date&gt; &lt;dbl&gt; ## 1 2022-01-01 11 ## 2 2022-01-02 NA ## 3 2022-01-03 13 ## 4 2022-01-04 14 3.16 時系列データの頻度変換 tidyverseと整合性がある金融時系列データ分析用のパッケージであるtidyquantパッケージのtq_transmute()関数を用いて、時系列データの頻度変換（高頻度データから低頻度データへの変換）を行います。なお、tidyquantは頻度変換以外にも様々な分析機能があります。詳しくはこちらをご参照ください。 まず、使用するサンプルデータを作成します。 # サンプルデータを作成（日次データ） data_owid_cases_wide &lt;- data_owid %&gt;% dplyr::select(location, date, new_cases) %&gt;% dplyr::filter(date &gt;= &quot;2021-01-01&quot;) %&gt;% dplyr::arrange(date) %&gt;% tidyr::pivot_wider(id_cols = &quot;date&quot;, names_from = &quot;location&quot;, values_from = &quot;new_cases&quot;) 日次データを週次データに変換 tidyquant::tq_transmute()関数を使用して日次データを週次データに変換すると、月曜～日曜のデータがFUNに指定した関数で集計され、日曜の日付で記録されます。 data_owid_cases_wide %&gt;% tidyquant::tq_transmute(select = -date, mutate_fun = apply.weekly, FUN = mean, na.rm = TRUE) ## # A tibble: 71 x 244 ## date Afghanistan Africa Albania Algeria Andorra Angola Anguilla ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-01-03 126. 24211. 374 266 47.7 29.7 0.667 ## 2 2021-01-10 111. 31857. 594. 248 56.3 78.7 0 ## 3 2021-01-17 70.7 29727. 585 241. 71 97.4 0 ## 4 2021-01-24 87.3 25102. 655. 252. 66.6 74.9 0 ## 5 2021-01-31 61.1 18531. 836. 249 55.4 56.7 0.143 ## 6 2021-02-07 44.6 14379. 1030. 250. 44.9 41.4 0.143 ## 7 2021-02-14 22.4 11848. 1106. 232. 36 40 0.143 ## 8 2021-02-21 16 10877. 1024. 172. 28 21.9 0 ## 9 2021-02-28 15.7 9707. 989. 168. 23.9 41.1 0 ## 10 2021-03-07 19 9535. 819. 163. 25.1 39.9 0 ## # ... with 61 more rows, and 236 more variables: `Antigua and Barbuda` &lt;dbl&gt;, ## # Argentina &lt;dbl&gt;, Armenia &lt;dbl&gt;, Aruba &lt;dbl&gt;, Asia &lt;dbl&gt;, Australia &lt;dbl&gt;, ## # Austria &lt;dbl&gt;, Azerbaijan &lt;dbl&gt;, Bahamas &lt;dbl&gt;, Bahrain &lt;dbl&gt;, ## # Bangladesh &lt;dbl&gt;, Barbados &lt;dbl&gt;, Belarus &lt;dbl&gt;, Belgium &lt;dbl&gt;, ## # Belize &lt;dbl&gt;, Benin &lt;dbl&gt;, Bermuda &lt;dbl&gt;, Bhutan &lt;dbl&gt;, Bolivia &lt;dbl&gt;, ## # `Bonaire Sint Eustatius and Saba` &lt;dbl&gt;, `Bosnia and Herzegovina` &lt;dbl&gt;, ## # Botswana &lt;dbl&gt;, Brazil &lt;dbl&gt;, `British Virgin Islands` &lt;dbl&gt;, ... なお、日曜～土曜のデータを集計し日曜の日付で記録したい場合は、rollmean()関数を使用して前方7日移動平均を計算し、日曜の値を抽出します。 data_owid_cases_wide %&gt;% dplyr::mutate(across(-date, rollmean, k = 7, na.pad = TRUE, align = &quot;left&quot;)) %&gt;% dplyr::filter(lubridate::wday(date) == 1) ## # A tibble: 70 x 244 ## date Afghanistan Africa Albania Algeria Andorra Angola Anguilla ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-01-03 116. 30479 577. 251. 60 78.3 0.286 ## 2 2021-01-10 76.9 30443. 598. 243. 64.6 87 0 ## 3 2021-01-17 88.7 26023. 604. 251. 65.9 86 0 ## 4 2021-01-24 64.1 19162. 830 250. 55.1 59.3 0.143 ## 5 2021-01-31 46 14925. 994. 215. 45.9 40 0.143 ## 6 2021-02-07 20.4 12066. 1111. 269. 36.7 38.1 0.143 ## 7 2021-02-14 15.3 11007. 1011. 179. 29.9 24.3 0 ## 8 2021-02-21 18.1 9721. 1022. 171. 25.3 40.4 0 ## 9 2021-02-28 19 9670. 838. 163. 24.3 39 0 ## 10 2021-03-07 17 10201. 678. 148. 29.9 38.3 0.429 ## # ... with 60 more rows, and 236 more variables: `Antigua and Barbuda` &lt;dbl&gt;, ## # Argentina &lt;dbl&gt;, Armenia &lt;dbl&gt;, Aruba &lt;dbl&gt;, Asia &lt;dbl&gt;, Australia &lt;dbl&gt;, ## # Austria &lt;dbl&gt;, Azerbaijan &lt;dbl&gt;, Bahamas &lt;dbl&gt;, Bahrain &lt;dbl&gt;, ## # Bangladesh &lt;dbl&gt;, Barbados &lt;dbl&gt;, Belarus &lt;dbl&gt;, Belgium &lt;dbl&gt;, ## # Belize &lt;dbl&gt;, Benin &lt;dbl&gt;, Bermuda &lt;dbl&gt;, Bhutan &lt;dbl&gt;, Bolivia &lt;dbl&gt;, ## # `Bonaire Sint Eustatius and Saba` &lt;dbl&gt;, `Bosnia and Herzegovina` &lt;dbl&gt;, ## # Botswana &lt;dbl&gt;, Brazil &lt;dbl&gt;, `British Virgin Islands` &lt;dbl&gt;, ... 日次データを月次データに変換 tidyquant::tq_transmute()関数を使用して日次データを月次データに変換すると、月初～月末のデータがFUNに指定した関数で集計され、月末の日付で記録されます。 data_owid_cases_wide %&gt;% tidyquant::tq_transmute(select = -date, mutate_fun = apply.monthly, FUN = mean, na.rm = TRUE) ## # A tibble: 17 x 244 ## date Afghanistan Africa Albania Algeria Andorra Angola Anguilla ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-01-31 86.9 26102. 639. 249. 60.9 72.4 0.0968 ## 2 2021-02-28 24.7 11703. 1037. 205. 33.2 36.1 0.0714 ## 3 2021-03-31 23.9 10321. 580. 132. 36.9 48.5 0.226 ## 4 2021-04-30 110. 11347. 198. 164. 40.7 145. 2.27 ## 5 2021-05-31 390. 9119. 39.7 220. 16.0 255. 0.516 ## 6 2021-06-30 1561. 22139. 6.87 357. 6.13 143. 0 ## 7 2021-07-31 919. 38865. 18.1 1025. 24.7 127. 0.129 ## 8 2021-08-31 196. 34873. 429. 796. 11.5 154. 3.35 ## 9 2021-09-30 65.1 17350. 791. 243. 6.3 301. 6.4 ## 10 2021-10-31 34.7 6251. 489. 99.8 9.48 253. 17.3 ## 11 2021-11-30 34.6 5468. 488. 136. 53.3 24.5 14.7 ## 12 2021-12-31 25.6 34489. 332. 255. 214. 530. 9.29 ## 13 2022-01-31 162. 36481. 1559. 1087. 394. 533 21.0 ## 14 2022-02-28 383. 15932. 465 458. 72.9 22.3 8.25 ## 15 2022-03-31 132. 7282. 68.2 23.7 65.3 13.8 4.68 ## 16 2022-04-30 37.7 5782. 47.7 3.63 47.3 3.93 2.93 ## 17 2022-05-03 7.33 4755. 28 0.667 NaN 0 0 ## # ... with 236 more variables: `Antigua and Barbuda` &lt;dbl&gt;, Argentina &lt;dbl&gt;, ## # Armenia &lt;dbl&gt;, Aruba &lt;dbl&gt;, Asia &lt;dbl&gt;, Australia &lt;dbl&gt;, Austria &lt;dbl&gt;, ## # Azerbaijan &lt;dbl&gt;, Bahamas &lt;dbl&gt;, Bahrain &lt;dbl&gt;, Bangladesh &lt;dbl&gt;, ## # Barbados &lt;dbl&gt;, Belarus &lt;dbl&gt;, Belgium &lt;dbl&gt;, Belize &lt;dbl&gt;, Benin &lt;dbl&gt;, ## # Bermuda &lt;dbl&gt;, Bhutan &lt;dbl&gt;, Bolivia &lt;dbl&gt;, ## # `Bonaire Sint Eustatius and Saba` &lt;dbl&gt;, `Bosnia and Herzegovina` &lt;dbl&gt;, ## # Botswana &lt;dbl&gt;, Brazil &lt;dbl&gt;, `British Virgin Islands` &lt;dbl&gt;, ... 日次データを四半期データに変換 tidyquant::tq_transmute()関数を使用して日次データを四半期データに変換すると、期初～期末のデータがFUNに指定した関数で集計され、期末の日付で記録されます。 data_owid_cases_wide %&gt;% tidyquant::tq_transmute(select = -date, mutate_fun = apply.quarterly, FUN = mean, na.rm = TRUE) ## # A tibble: 6 x 244 ## date Afghanistan Africa Albania Algeria Andorra Angola Anguilla ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-03-31 45.8 16187. 743. 195. 44.0 52.9 0.133 ## 2 2021-06-30 684. 14146. 80.9 247. 20.9 182. 0.923 ## 3 2021-09-30 397. 30504. 409. 693. 14.2 193. 3.26 ## 4 2021-12-31 31.6 15510. 436. 164. 92.6 272. 13.8 ## 5 2022-03-31 221 20031. 705. 525. 181. 195. 11.4 ## 6 2022-05-03 35.0 5689. 45.9 3.36 47.3 3.58 2.67 ## # ... with 236 more variables: `Antigua and Barbuda` &lt;dbl&gt;, Argentina &lt;dbl&gt;, ## # Armenia &lt;dbl&gt;, Aruba &lt;dbl&gt;, Asia &lt;dbl&gt;, Australia &lt;dbl&gt;, Austria &lt;dbl&gt;, ## # Azerbaijan &lt;dbl&gt;, Bahamas &lt;dbl&gt;, Bahrain &lt;dbl&gt;, Bangladesh &lt;dbl&gt;, ## # Barbados &lt;dbl&gt;, Belarus &lt;dbl&gt;, Belgium &lt;dbl&gt;, Belize &lt;dbl&gt;, Benin &lt;dbl&gt;, ## # Bermuda &lt;dbl&gt;, Bhutan &lt;dbl&gt;, Bolivia &lt;dbl&gt;, ## # `Bonaire Sint Eustatius and Saba` &lt;dbl&gt;, `Bosnia and Herzegovina` &lt;dbl&gt;, ## # Botswana &lt;dbl&gt;, Brazil &lt;dbl&gt;, `British Virgin Islands` &lt;dbl&gt;, ... "],["ggplot2によるグラフ作成.html", "4 ggplot2によるグラフ作成", " 4 ggplot2によるグラフ作成 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
